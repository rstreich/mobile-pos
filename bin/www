#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('produce:server');
var https = require('https');
var http = require('http');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.HTTPS_PORT || '443');
app.set('port', port);
var httpPort = normalizePort(process.env.HTTP_PORT || '80');

var rootDir = path.join(__dirname, '..');
var certDir = path.join(rootDir, 'etc');

var options = {
    key: fs.readFileSync(path.join(certDir, 'cert-key.pem')),
    cert: fs.readFileSync(path.join(certDir, 'produce-cert.pem'))
};

var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var httpServer = http.createServer(function(req, res) {
    var host = req.headers.host.split(':')[0];
    var url = req.url;
    res.writeHead(301, {
        'Location': 'https://' + host + ':' + port + url,
        "Strict-Transport-Security": "max-age=604800"
    });
    res.end();
});
httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

// TODO: Clean shutdown of DB connections

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
